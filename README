DataSetTurbo v0.1

--- Overview ---

DataSetTurbo is library featuring a developing set of optimized C++ classes implementing highly optimized random number generation, dynamic arrays and other functions.

--- Random number generation ---

dstRandom.h provides a customizable random number generation library, highly optimized
for both floating point and integer random number generation, with particular
attention to execution speed and configurable floating point precision.

Implemented as a C++ class, any kind of random number generator that can provide
32 random bits at a time can be used in a derived class, taking advantage of the
high degree of optimization in the random number generation functions in the base
class.

A high-performance default random number generator, based on the CMWC
(Complementary-Multiply-With-Carry) algorithm, is provided.

Also provided is a program that tests the execution speed performance and
statistical properties of the random number generator.

Documentation of the public member functions is provided in the header file dstRandom.h

--- Dynamic arrays ---

The dynamic array classes implemented in dstDynamicArray.h implement a highly set of
dynamic arrays, that is arrays that are not limited in size (unlike a regular array)
and are automatically expanded when required, without compromising performance (as opposed
to linked lists).

A number template classes are utilized, allowing for specific optimization for different
types of data storage and maximum number of members.

See the header file dstDynamicArray.h for more detail.

--- Installation ----

Edit Makefile.conf to change the configuration (such as building of a static or
shared library).

Run 'make' or 'make library' to build the library. Run 'make test' to build the
test program, which requires the libfgen library to be installed (it used for
comparison purposes).

Run '(sudo) make install' to install the library and header file.

The test-random program can be used to test the performance and statistical properties
of the standard provided random number generator. The code can be modified to test
an alternative random number generator derived from the base class (although it would
probably be hard to beat the performance of the CMWC RNG).

--- License ---

Copyright (c) 2014 Harm Hanemaaijer <fgenfb@yahoo.com>

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

