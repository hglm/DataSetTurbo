DataSetTurbo v0.6.1

This document is out of date.

--- Overview ---

DataSetTurbo is library featuring a developing set of optimized C++ classes implementing highly optimized functions and classes in the following areas:

- Random number generation.
- Dynamic arrays.
- Device-independent abstraction of low-level SIMD primitives and implementation for SSE2/SSE3.
- SIMD-based functions for matrix multiplication and dot product calculation.
- A timer class including a threaded time-out.
- A task scheduler class for multi-threading.
- Vector and Matrix classes that were originally derived from code written by Eric Lengyel in
  association with the book "Mathematics for 3D Game Programming and Computer Graphics":
- Vector classes that implement 2D, 3D and 4D vectors as well a 3D point and color, with
  several SIMD-optimized functions for dot product calculations.
- Matrix classes that implement 3x3, 4x4 and 4x3 matrices, with SIMD-optimized functions for
  for matrix multiplication of various kinds.

Source code overview:

dstConfig.h		Basic definitions, symbol export control and include common headers.
dstMisc.cpp		Initialization/configuration-related functions.
dstCpuInfo.h		Gather CPU info (SIMD features etc) from kernel.
dstCpuInfo.cpp
dstMath.h		Various basic inline functions such as variations of min and max, tests
			of near-equality etc.

dstDynamicArray.h	Implementation of various configurable dynamic array classes,
			all derived from same template base class.

dstRandom.h		Random number generation functions, incuding the dstRNG
			class and dstRNGCMWC classes.
dstRandom.cpp		Member function implementations for the randon number generator.\
dstRNGCMWC.cpp		Complementary-Multiply-With-Carry RNG implementation.

dstTimer.h		Basic timer functions for measuring time beween two points, including
			a class that uses threads to implement a time-out.

dstThread.h		Class implementation of a thread manager (dstTaskScheduler).
dstThread.cpp

The following files are compiled once (with different compiler flags and SIMD featuers) for each
SIMD configuration.

dstSIMD.h		Low-level SIMD API header file, contains logic selecting SIMD
			implementation in includes it.
dstSIMDSSE2.h		Low-level SIMD API implementation for x86 SSE2/SSE3/SSSE3/SSE4A and later.
dstNEON.h		Low-level SIMD API implementatino for ARM NEON (work-in-progress).
dstSIMDFuncs.h		Prototypes for SIMD matrix multiplication and dot product functions.
dstSIMDFuncTable.cpp	Table of SIMD type function pointers. 
dstSIMDDot.h		SIMD-based inline functions and non-inline function declarations
			for class-independent functions operating on arrays of floats for 				calculating dot products.
dstSIMDMatrix.h		SIMD-based inline functions and non-inline function declarations
			for class-independent functions for multiplying two matrices, as well
			as classes implementing repeated SIMD multiplication of a 4x4 or 4x3
			matrix with a vector (all represented as arrays of floats).
dstSIMDDotMatrix.cpp	SIMD-based class-independent non-inline versions of functions declared
			in dstSIMDDot.h and dstSIMDMatrix.h.
dstSIMDDotMatrixNoSIMD.cpp Non-SIMD versios of matrix and dot product functions.
			
dstVectorMath.h		Header file for Vector2D, Vector3D, Vector4D and Point3D classes.
dstColor.h		Header file Color class derived from Vector3D.
dstVectorMath.cpp	Member function implementations for vector classes.
dstVectorMathSIMD.cpp	Functions that operate on Vector class types that use SIMD.
			Obsolete, superseded by dstSIMDDot.h.

dstMatrixMath.h		Header file for Matrix3D, Matrix4D and MatrixTransform classes.
dstMatrixMath.cpp	Member function implementation for matrix classes.
dstMatrixMathSIMD.cpp	Functions that operate on Matrix class types that use SIMD. Obsolete.

test-random.cpp		Test program for random number generator functions.
test-array.cpp		Test program for dynamic arrays.
test-simd.cpp		Test program for SIMD operations.

--- Random number generation ---

dstRandom.h provides a customizable random number generation library, highly optimized
for both floating point and integer random number generation, with particular
attention to execution speed and configurable floating point precision.

Implemented as a C++ class, any kind of random number generator that can provide
32 random bits at a time can be used in a derived class, taking advantage of the
high degree of optimization in the random number generation functions in the base
class.

A high-performance default random number generator, based on the CMWC
(Complementary-Multiply-With-Carry) algorithm, is provided.

Also provided is a program that tests the execution speed performance and
statistical properties of the random number generator.

Documentation of the public member functions is provided in the header file dstRandom.h

--- Dynamic arrays ---

The dynamic array classes implemented in dstDynamicArray.h implement a highly optimized set
of dynamic arrays, that is arrays that are not limited in size (unlike a regular array)
and are automatically expanded when required, without compromising performance (as opposed
to linked lists).

A number of template classes are utilized, allowing for specific optimization for different
types of data storage and different maximum numbers of members.

The predefined class names follow the following syntax:

dst[Tight][Small|VerySmall|Huge][data_type]Array

"Tight" is optional; the tight versions less aggressively expand the capacity of the array
when it is full, conserving memory space at some performance cost.

The next part, Small, VerySmall, Huge or nothing, indicates the storage size of the element
indices and the number of elements (the size of the array), as follows:
- (Nothing): The index storage type is 32-bit (uint32_t), allowing for 2^31 elements
  (2147483648) and a size near 2^32 (4290772992) in the tight variant.
- Small: The index storage type is 16-bit (uint16_t), allowing for 32768 elemements (64512 in
  the tight variant).
- VerySmall: The index storage type is 8-bit (uint16_t), allowing for 128 elements (240 in the
  tight variant).
- Huge: The index storage type is 64-bit (uint64_t), allowing for 2^63 elements
  (9223372036854775808) and nearly 2^64 (18446744073709535232) in the tight variant.

See the header file dstDynamicArray.h for more detail.

--- Installation ----

Edit Makefile.conf to change the configuration (such as building of a static or
shared library).

Run 'make' or 'make library' to build the library. Run 'make test' to build the
test program, which requires the libfgen library to be installed (it used for
comparison purposes).

Run '(sudo) make install' to install the library and header file.

The test-random program can be used to test the performance and statistical properties
of the standard provided random number generator. The code can be modified to test
an alternative random number generator derived from the base class (although it would
probably be hard to beat the performance of the CMWC RNG).


--- Current bugs, possible improvements ---

- The default matrix multiplication operators for Matrix4D and Matrix4x3RM are currently
  not SIMD-accelerated. The DST_USE_SIMD flag is no longer used, so the non-SIMD versions
  are always compiled in dstMatrixMath.cpp. Calls to SIMD-accelerated matrix multiplication
  functions should probably be integrated into multiplication operator definitions in
  dstMatrixMath.h.

--- License ---

Copyright (c) 2015 Harm Hanemaaijer <fgenfb@yahoo.com>

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

