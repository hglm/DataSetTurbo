# LIBRARY_CONFIGURATION determines whether a shared or static library will
# be built. Supported values are SHARED, STATIC and DEBUG (static with
# debugging and no optimization). The INCLUDE_DIR is the installation
# directory for library header file.
#
# The HEADER_FILE_INSTALL_DIR is the installation directory prefix for library
# header files. They will be installed in the subdirectory DataSetTurbo.
#
# SHARED_LIB_INSTALL_DIR and STATIC_LIB_INSTALL_DIR are the installation
# directories of the shared and static libraries. The target architecture
# triplet string TARGET_MACHINE, obtained from gcc -dumpmachine, may be
# prefixed with /usr/lib to generate a path like /usr/lib/x86_64-gnu-linux.
#
# PKG_CONFIG_INSTALL_DIR is the installation directory of the pkgconfig file
# datasetturbo.pc.

LIBRARY_CONFIGURATION = STATIC
HEADER_FILE_INSTALL_DIR = /usr/include
TARGET_MACHINE = `gcc -dumpmachine`
SHARED_LIB_DIR = /usr/lib/$(TARGET_MACHINE)
STATIC_LIB_DIR = /usr/lib/$(TARGET_MACHINE)
PKG_CONFIG_INSTALL_DIR = /usr/lib/$(TARGET_MACHINE)

# TARGET_ARCH defines the basic CPU architecture to configure for. It must be
# one of the following:
#
# X86		Any x86 or x86-64 class CPU.
# ARM		Any ARM instruction set CPU.

TARGET_ARCH = X86

# TARGET_CPU defines CPU to optimize for. May be left blank (for example on
# x86). It passes appropriate -mcpu and -mfpu flags to gcc. Supported values:
#
# CORTEX_A7	ARM Cortex-A7 ARMv7-A CPU cores.
# CORTEX_A15	ARM Cortex-A15 ARMv7-A CPU cores
# CORTEX_A5	ARM Cortex-A5 ARMVv7-A CPU cores.
# CORTEX_A8	ARM Cortex-A8 ARMv7-A CPU cores.
# CORTEX_A9	ARM Cortex-A9 ARMv7-A CPU cores.

TARGET_CPU =

# TARGET_SIMD defines a fixed specification for the type of SIMD instruction
# sets to use for vector math optimizations. The code will not run on systems
# that do not have the specification as a minimum. Only code for the specified
# SIMD configuration will be generated, which has significantly less overhead
# for small operations. When left blank, the library will auto-detect SIMD
# features.
#
# SIMD extension description:
#
# SSE2		Baseline SSE level supported by the library, implemented by
#		most Intel processors since 2001 and AMD since 2003, including
#		all x86-64 ones. SSE2 is enabled by default on 64-bit Linux x86
#		platforms.
# SSE3		Extension of SSE2, introduced by Intel 2004 in Prescott, and by
#		AMD starting from versions of Athlon 64 released in 2005.
# SSSE3		Intel extension, supported by Intel from 2007, but by AMD only
#		from Bulldozer (FX series).
# SSE4A		Some extra instructions supported in AMD CPUs starting from
#		Phenom (2007). Starting from Bulldozer, it also supports
#		transparent unaligned loads.
# SSE41		Supported by Intel processors starting from Penryn (more recent
#		Core 2) and much later by AMD starting from Bulldozer (FX series).
# SSE42		Supported by Intel since Nehalem core. Supported by AMD starting
#		from Bulldozer.
# FMA4		Fused multiply-add supported by AMD in Bulldozer (FX) and
#		Piledriver.
# FMA3		Fused multiply-add supported by Intel in Haswell, by AMD since
#		Piledriver and Trinity (APU).
# AVX		256-bit SIMD registers, reduced alignment requirements, some new
#		instructions. Supported by Intel since Sandy Bridge and by AMD
#		starting from Bulldozer and later, and the low-power Jaguar core.
#
# Supported values:
#
# X86_SSE2	32-bit/64-bit x86 processors with SSE2 support. 
# X86_SSE3	x86 processors with SSE2 and SSE3 support (most modern PC class CPUs).
# X86_SSSE3	SSE2, SSE3 and SSSE3.
# X86_SSE4A	SSE2, SSE3 and SSE4A for AMD processors starting from Phenom.
# X86_SSE41     SSE2, SSE3, SSSE3 and SSE4.1 (Intel Penryn and later).
# X86_SSE42	SSE2, SSE3, SSSE3, SSE4.1 and SSE4.2 (Intel Nehalem and later).
# X86_AVX	SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 and AVX, for recent Intel/AMD CPUs.
# X86_AVX_SSE4A_FMA4
#		SSE2, SSE3, SSE4A (with unaligned support), SSSE3, SSE4.1, SSE4.2,
#		AVX and FMA4, for Bulldozer-class AMD CPUs.
# X86_AVX_FMA	SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 and AVX, for recent Intel/AMD with
#		support for AVX and FMA3.
# ARM_NEON	ARM Cortex processors with NEON extension (currently not used).
# NONE		Disable the use of SIMD even when it is default platform feature.

TARGET_SIMD = 

# PREFER_LIBC_MEMCPY defines whether the libc implementation of memcpy is always
# preferred over inline versions with unrolled and non-unrolled loops with aligned
# and non-aligned variants (may themselves may use libc memcpy for several cases).
#
# Allowed values are YES or NO. The default is NO.

PREFER_LIBC_MEMCPY = NO

# UNALIGNED_MEMORY_ACCESS defines whether the CPU can handle non-32-bit aligned
# memory access instructions. Most modern x86 and ARM CPUs can handle unaligned
# access (although usually with a performance penalty).
#
# Allowed values are YES or NO. The default is YES.

UNALIGNED_MEMORY_ACCESS = YES

